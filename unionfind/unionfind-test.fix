module CPLib.UnionFind.Test;

import CPLib.UnionFind;

import Random;

test : IO ();
test = (
    test_zero;;
    test_by_hand;;
    let (_, time) = *consumed_time_while_io(test_speed);
    println("[CPLib.UnionFind.Test] test_speed: time = " + time.to_string);;
    pure()
);

test_zero : IO ();
test_zero = (
    // UnionFind木のサイズが0の場合
    let uf = UnionFind::create(0);
    let (uf, grps) = uf.get_groups;
    assert_eq(|_|"", grps.get_size, 0);;

    pure()
);

test_by_hand : IO ();
test_by_hand = (
    let uf = UnionFind::create(6);
    assert_eq(|_|"", uf.is_united(0, 0).@1, true);;
    assert_eq(|_|"", uf.is_united(0, 1).@1, false);;
    let (uf, grps) = uf.get_groups;
    assert_eq(|_|"", grps.get_size, 6);;

    let uf = uf.unite(0, 1);
    assert_eq(|_|"", uf.is_united(0, 1).@1, true);;
    assert_eq(|_|"", uf.is_united(0, 2).@1, false);;
    assert_eq(|_|"", uf.is_united(1, 2).@1, false);;
    let (uf, grps) = uf.get_groups;
    assert_eq(|_|"", grps.get_size, 5);;

    let uf = uf.unite(1, 2);
    assert_eq(|_|"", uf.is_united(1, 2).@1, true);;
    assert_eq(|_|"", uf.is_united(0, 2).@1, true);;
    assert_eq(|_|"", uf.is_united(0, 3).@1, false);;
    let (uf, grps) = uf.get_groups;
    assert_eq(|_|"", grps.get_size, 4);;

    let uf = uf.unite(3, 4);
    assert_eq(|_|"", uf.is_united(1, 2).@1, true);;
    assert_eq(|_|"", uf.is_united(0, 2).@1, true);;
    assert_eq(|_|"", uf.is_united(0, 3).@1, false);;
    assert_eq(|_|"", uf.is_united(3, 4).@1, true);;
    assert_eq(|_|"", uf.is_united(4, 5).@1, false);;
    let (uf, grps) = uf.get_groups;
    assert_eq(|_|"", grps.get_size, 3);;
    let grps = grps.sort_by(|(a, b)| a.get_size > b.get_size);
    let grps = grps.map(|grp| grp.sort_by(|(a, b)| a < b));
    assert_eq(|_|"", grps, [[0, 1, 2], [3, 4], [5]]);;

    let uf = uf.unite(2, 3);
    assert_eq(|_|"", uf.is_united(1, 2).@1, true);;
    assert_eq(|_|"", uf.is_united(0, 2).@1, true);;
    assert_eq(|_|"", uf.is_united(0, 3).@1, true);;
    assert_eq(|_|"", uf.is_united(3, 4).@1, true);;
    assert_eq(|_|"", uf.is_united(4, 5).@1, false);;
    let (uf, grps) = uf.get_groups;
    assert_eq(|_|"", grps.get_size, 2);;

    let uf = uf.unite(4, 5);
    assert_eq(|_|"", uf.is_united(1, 2).@1, true);;
    assert_eq(|_|"", uf.is_united(0, 2).@1, true);;
    assert_eq(|_|"", uf.is_united(0, 3).@1, true);;
    assert_eq(|_|"", uf.is_united(3, 4).@1, true);;
    assert_eq(|_|"", uf.is_united(4, 5).@1, true);;
    let (uf, grps) = uf.get_groups;
    assert_eq(|_|"", grps.get_size, 1);;

    pure()
);

test_speed : IO ();
test_speed = (
    // n=10^5個の要素を持つUnionFind木を生成し、n回程度ランダムにクエリを投げる。
    // もしn^2実装になっていたらこのテストは終わらない。
    let n = 1e5;
    let rng = Random::init_by_seed(0_U64);
    let uf = UnionFind::create(n);
    let ((uf, rng), time) = consumed_time_while_lazy(|_| range(0, n).fold((uf, rng), |_, (uf, rng)| (
        // unite
        let (rng, i) = rng.generate_I64_nonneg;
        let (rng, j) = rng.generate_I64_nonneg;
        let i = i % n; // 0 <= i < n
        let j = j % n; // 0 <= j < n
        let uf = uf.unite(i, j);

        // is_united
        let (rng, k) = rng.generate_I64_nonneg;
        let (rng, l) = rng.generate_I64_nonneg;
        let k = k % n; // 0 <= k < n
        let l = l % n; // 0 <= l < n
        let (uf, is_united) = uf.is_united(k, l);

        (uf, rng)
    )));
    let (uf, grps) = uf.get_groups;
    assert_eq(|_|"test_speed", grps.get_size, 16102);;
    println $ "[CPLib.UnionFind.Test] UnionFind({}): {}".populate([n.to_string, time.to_string]);;

    pure()
);
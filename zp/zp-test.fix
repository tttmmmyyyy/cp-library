module CPLib.ZP.Test;

import CPLib.ZP;
import CPLib.Arithmetic::pmod;

type P17 = unbox struct {};

impl P17 : PrimeProvider {
    create = P17 {};
    value = |p| 17_U32;
}

test : IO ();
test = (
    test_basic;;
    test_power;;
    test_primitive_root;;
    test_fft_immutability;;

    pure()
);

test_basic : IO ();
test_basic = (
    assert_eq(|_|"test_zp_basic 1", 
        ZP::make(1e9) + ZP::make(2e9),
        ZP::make(999999986) : ZP P1000000007);;
    assert_eq(|_|"test_zp_basic 2", 
        ZP::make(1e9) * ZP::make(2e9), 
        ZP::make(98) : ZP P1000000007);;
    assert_eq(|_|"test_zp_basic 3", 
        ZP::make(1e9) / ZP::make(1e9),
        ZP::make(1) : ZP P1000000007);;
    assert_eq(|_|"test_zp_basic 4",
        ZP::make(1e9) - ZP::make(1e9),
        ZP::make(0) : ZP P1000000007);;
    assert_eq(|_|"test_zp_basic 5",
        ZP::make(1e9) + (-ZP::make(1e9)),
        ZP::make(0) : ZP P1000000007);;
    assert_eq(|_|"test_zp_basic 6",
        ZP::make(1e9) + ZP::make(-1e9-1),
        ZP::make(1000000006) : ZP P1000000007);;
    
    range(-30, 30).product(range(-30, 30)).fold_m((), |(x, y), _|
        // Addition
        assert_eq(|_|"test_zp_basic " + x.to_string + " + " + y.to_string,
            ZP::make(x) + ZP::make(y),
            ZP::make((x + y).pmod(17)) : ZP P17);;

        // Subtraction
        assert_eq(|_|"test_zp_basic " + x.to_string + " - " + y.to_string,
            ZP::make(x) - ZP::make(y),
            ZP::make((x - y).pmod(17)) : ZP P17);;

        // Multiplication
        assert_eq(|_|"test_zp_basic " + x.to_string + " * " + y.to_string,
            ZP::make(x) * ZP::make(y),
            ZP::make((x * y).pmod(17)) : ZP P17);;

        pure()
    ).forget;;

    // Inversion
    range(-30, 30).filter(|x| x.pmod(17) != 0).fold_m((), |x, _|
        let zp = ZP::make(x) : ZP P17;
        let zpinv = zp.inv;
        assert_eq(|_|"test_zp_basic inv " + x.to_string,
            zp * zpinv,
            ZP::make(1) : ZP P17);;
        pure()
    ).forget;;

    pure()

);

test_power : IO ();
test_power = (

    let cases = [
        (0, 1, 0),
        (0, 2, 0),
        (0, 3, 0),
        (1, 0, 1),
        (1, 1, 1),
        (1, 2, 1),
        (1, 3, 1),
        (1, 20, 1),
        (1, -1, 1),
        (1, -2, 1),
        (1, -3, 1),
        (1, -20, 1),
        (2, 0, 1),
        (2, 1, 2),
        (2, 2, 4),
        (2, 3, 8),
        (2, 20, 16),
        (2, -1, 9),
        (2, -2, 13),
        (2, -3, 15),
        (2, -20, 16),
        (-5, 0, 1),
        (-5, 1, -5),
        (-5, 2, 8),
        (-5, 3, 11),
        (-5, 4, 13),
        (-5, 20, 13),
        (-5, -1, 10),
        (-5, -2, 15),
        (-5, -3, 14),
        (-5, -20, 4)
    ];

    cases.to_iter.fold_m((), |(x, e, ans), _|
        let res = ZP::make(x).power(e) : ZP P17;
        assert_eq(|_|"test_zp_power " + x.to_string + "^" + e.to_string + " = " + res.to_string + " != " + ans.to_string,
            res,
            ZP::make(ans)
        )
    );;

    pure()
);

test_primitive_root : IO ();
test_primitive_root = (
    // コンパイルできることだけ確認する
    let r = ZP::primitive_root : ZP P17;
    assert_eq(|_|"test_zp_primitive_root",
        r.@value, 3_U32
    );;
    pure()
);

test_fft_immutability : IO ();
test_fft_immutability = (
    // ZPのFFTが不変であることを確認する
    let x = [1, 2, 3, 4].map(make) : Array (ZP P17);
    let y = x.fft(forward());
    assert_eq(|_|"test_fft_immutability",
        x.get_size, y.get_size
    );;
    assert_eq(|_|"test_fft_immutability",
        x, [1, 2, 3, 4].map(make));;
    pure()
);
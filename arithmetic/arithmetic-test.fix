module CPLib.Arithmetic.Test;

import CPLib.Arithmetic;

test : IO ();
test = (
    test_pmod;;
    test_gcd;;
    test_ext_gcd;;
    test_pow_mod;;
    test_inv_mod;;

    pure()
);

test_pmod : IO ();
test_pmod = (
    assert_eq(|_|"pmod 1", 12.pmod(5), 2);;
    assert_eq(|_|"pmod 2", -12.pmod(5), 3);;
    assert_eq(|_|"pmod 3", 12.pmod(-5), 2);;
    assert_eq(|_|"pmod 4", -12.pmod(-5), 3);;

    pure()
);

test_gcd : IO ();
test_gcd = (
    assert_eq(|_|"gcd 1", calc_gcd(12, 15), 3);;
    assert_eq(|_|"gcd 1", calc_gcd(-12, 15), 3);;
    assert_eq(|_|"gcd 2", calc_gcd(12, -15), 3);;
    assert_eq(|_|"gcd 3", calc_gcd(-12, -15), 3);;
    assert_eq(|_|"gcd 4", calc_gcd(0, 15), 15);;
    assert_eq(|_|"gcd 5", calc_gcd(15, 0), 15);;
    assert_eq(|_|"gcd 6", calc_gcd(0, 0), 0);;
    assert_eq(|_|"gcd 7", calc_gcd(17, 19), 1);;
    assert_eq(|_|"gcd 8", calc_gcd(17, 17), 17);;

    pure()
);

test_ext_gcd : IO ();
test_ext_gcd = (
    let (d, (x, y)) = ext_gcd(12, 15);
    assert_eq(|_|"ext_gcd 1a", d, 3);;
    assert_eq(|_|"ext_gcd 1b", x * 12 + y * 15, d);;

    let (d, (x, y)) = ext_gcd(-12, 15);
    assert_eq(|_|"ext_gcd 2a", d, 3);;
    assert_eq(|_|"ext_gcd 2b", x * -12 + y * 15, d);; 

    let (d, (x, y)) = ext_gcd(12, -15);
    assert_eq(|_|"ext_gcd 3a", d, 3);;
    assert_eq(|_|"ext_gcd 3b", x * 12 + y * -15, d);;

    let (d, (x, y)) = ext_gcd(-12, -15);
    assert_eq(|_|"ext_gcd 4a", d, 3);;
    assert_eq(|_|"ext_gcd 4b", x * -12 + y * -15, d);;

    let (d, (x, y)) = ext_gcd(0, 15);
    assert_eq(|_|"ext_gcd 5a", d, 15);;
    assert_eq(|_|"ext_gcd 5b", x * 0 + y * 15, d);;

    let (d, (x, y)) = ext_gcd(15, 0);
    assert_eq(|_|"ext_gcd 6a", d, 15);;
    assert_eq(|_|"ext_gcd 6b", x * 15 + y * 0, d);;

    let (d, (x, y)) = ext_gcd(0, 0);
    assert_eq(|_|"ext_gcd 7a", d, 0);;
    assert_eq(|_|"ext_gcd 7b", x * 0 + y * 0, d);;

    let (d, (x, y)) = ext_gcd(17, 19);
    assert_eq(|_|"ext_gcd 8a", d, 1);;
    assert_eq(|_|"ext_gcd 8b", x * 17 + y * 19, d);;

    let (d, (x, y)) = ext_gcd(17, 17);
    assert_eq(|_|"ext_gcd 9a", d, 17);;
    assert_eq(|_|"ext_gcd 9b", x * 17 + y * 17, d);;

    pure()
);

test_pow_mod : IO ();
test_pow_mod = (
    // 基本的なケース
    assert_eq(|_|"pow_mod 1 (5^2 mod 3)", 5.pow_mod(2, 3), 1);; // 5^2 = 25, 25 mod 3 = 1
    assert_eq(|_|"pow_mod 2 (5^3 mod 4)", 5.pow_mod(3, 4), 1);; // 5^3 = 125, 125 mod 4 = 1
    assert_eq(|_|"pow_mod 3 (2^10 mod 7)", 2.pow_mod(10, 7), 2);; // 2^10 = 1024, 1024 mod 7 = 2
    assert_eq(|_|"pow_mod 4 (0^5 mod 10)", 0.pow_mod(5, 10), 0);; // 0^5 = 0, 0 mod 10 = 0
    assert_eq(|_|"pow_mod 5 (any^0 mod any)", 123.pow_mod(0, 456), 1);; // 指数0の場合、常に1

    // 負の底のテスト (pmodの振る舞いによる)
    assert_eq(|_|"pow_mod 6 (-5^2 mod 3)", (-5).pow_mod(2, 3), 1);; // (-5)^2 = 25, 25 mod 3 = 1
    assert_eq(|_|"pow_mod 7 (-2^3 mod 5)", (-2).pow_mod(3, 5), 2);; // (-2)^3 = -8, -8 mod 5 = 2

    // 法が1の場合のテスト
    assert_eq(|_|"pow_mod 8 (any^any mod 1)", 7.pow_mod(100, 1), 0);; // mod 1 は常に0

    // オーバーフローに着目したテスト
    let max = I32::maximum.to_I64;
    assert_eq(|_|"pow_mod 9 (large x, e, m)", (max - 1).pow_mod(2, max), (max - 1) * (max - 1) % max);;
    assert_eq(|_|"pow_mod 10 (large x, e, small m)", max.pow_mod(10, 2), 1);;
    assert_eq(|_|"pow_mod 11 (large x, large m)", (max / 2).pow_mod(3, max / 3), (((max / 2) * (max / 2)) % (max / 3) * (max / 2)) % (max / 3));;

    // 特殊なケース
    assert_eq(|_|"pow_mod 12 (0^0 mod any)", 0.pow_mod(0, 5), 1);;

    pure()
);

test_inv_mod : IO ();
test_inv_mod = (
    let m = 17;
    range(-30, 30).filter(|x| x.pmod(m) != 0).fold_m((), |a, _|
        let x = a.inv_mod(m);
        let ax = (a * x).pmod(m);
        assert_eq(|_|"test_inv_mod ax mod m - 1, x = " + x.to_string, ax, 1);;
        assert(|_|"test_inv_mod 0 <= x < m, x = " + x.to_string, 0 <= x && x < m);;
        pure()
    );;
    pure()
);
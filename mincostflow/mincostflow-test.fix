module CPLib.MinCostFlow.Test;

// https://atcoder.jp/contests/language-test-202505/submissions/68408186

import CPLib.MinCostFlow;
import CPLib.Trait;

test : IO ();
test = (
    test_basic;;
    pure()
);

test_basic : IO ();
test_basic = (
    let g = MinCostFlowGraph::create(5, 0, 4);
    let (g, e0) = g.add_edge_id(0, 1, 10, 2);
    let (g, e1) = g.add_edge_id(0, 2, 2, 4);
    let (g, e2) = g.add_edge_id(1, 2, 6, 6);
    let (g, e3) = g.add_edge_id(1, 3, 6, 2);
    let (g, e4) = g.add_edge_id(2, 4, 5, 2);
    let (g, e5) = g.add_edge_id(3, 2, 3, 3);
    let (g, e6) = g.add_edge_id(3, 4, 8, 6);
    let (g, flow, cost) = g.maximize_flow_min_cost(9);
    assert_eq(|_|"flow", flow, 9);;
    assert_eq(|_|"cost", cost, 80);;
    assert_eq(|_|"e0", g.get_flow(e0), 7);;
    assert_eq(|_|"e1", g.get_flow(e1), 2);;
    assert_eq(|_|"e2", g.get_flow(e2), 1);;
    assert_eq(|_|"e3", g.get_flow(e3), 6);;
    assert_eq(|_|"e4", g.get_flow(e4), 5);;
    assert_eq(|_|"e5", g.get_flow(e5), 2);;
    assert_eq(|_|"e6", g.get_flow(e6), 4);;
    pure()
);
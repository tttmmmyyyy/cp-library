module CPLib.Convolution;

import CPLib.ZP;

// 2つの配列の畳み込みを計算する
// 
// 結果は、要素数が`|a| + |b| - 1`の配列になります。
//
// 制約：2^c|(p-1)かつ|a| + |b| - 1 <= 2^cなるcが存在する
// 
// # Parameters
// - `a` : 畳み込みの左辺の配列
// - `b` : 畳み込みの右辺の配列
convolve_zp : [p : PrimeProvider] Array (ZP p) -> Array (ZP p) -> Array (ZP p);
convolve_zp = |x, y| (
    if x.get_size == 0 || y.get_size == 0 { [] };

    // xとyの長さを同じ2のべき乗にする
    let n = x.get_size + y.get_size - 1;
    let pot = _calc_next_pot(n.to_U64).to_I64;
    let x = x.reserve(pot);
    let x = range(x.get_size, pot).fold(x, |i, x| x.push_back(ZP::make(0)));
    let y = y.reserve(pot);
    let y = range(y.get_size, pot).fold(y, |i, y| y.push_back(ZP::make(0)));

    let x = x.ZP::fft(forward());
    let y = y.ZP::fft(forward());

    // xとyの各要素を掛け合わせる
    let x = range(0, pot).fold(x, |i, x| x._unsafe_set(i, x.@(i) * y.@(i)));

    // 逆変換を行う
    let x = x.ZP::fft(inverse());

    // サイズを元に戻す
    x.truncate(n)
);
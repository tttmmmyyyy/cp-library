module CPLib.MaxFlow.Test;

import CPLib.MaxFlow;

test : IO ();
test = (
    test_basic;;
    pure()
);

test_basic : IO ();
test_basic = (
    let graph = MaxFlowGraph::create(5, I64::maximum);
    let (graph, eid0) = graph.add_edge(0, 1, 10);
    let (graph, eid1) = graph.add_edge(0, 2, 2);
    let (graph, eid2) = graph.add_edge(1, 2, 6);
    let (graph, eid3) = graph.add_edge(1, 3, 6);
    let (graph, eid4) = graph.add_edge(2, 4, 5);
    let (graph, eid5) = graph.add_edge(3, 2, 4);
    let (graph, eid6) = graph.add_edge(3, 4, 8);
    let (graph, flow) = graph.maximize_flow(0, 4);
    assert_eq(|_|"", flow, 11);;
    assert_eq(|_|"", graph.get_flow(eid0), 9);;
    assert_eq(|_|"", graph.get_flow(eid1), 2);;
    assert_eq(|_|"", graph.get_flow(eid2), 3);;
    assert_eq(|_|"", graph.get_flow(eid3), 6);;
    assert_eq(|_|"", graph.get_flow(eid4), 5);;
    assert_eq(|_|"", graph.get_flow(eid5), 0);;
    assert_eq(|_|"", graph.get_flow(eid6), 6);;
    pure()
);
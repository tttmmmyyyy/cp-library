module CPLib.Segtree.Test;

import CPLib.Segtree;
import CPLib.Trait::{Monoid, Monoid::*};

import Random;

// https://atcoder.jp/contests/language-test-202505/submissions/68392568

test : IO ();
test = (
    test_one;;
    test_two;;
    test_three;;

    let rng = Random::init_by_seed(0_U64);
    let rng = *test_random(false, rng);
    let rng = *test_random(true, rng);

    test_speed;;
    
    pure()
);

// 文字列の結合に関するモノイド
type StrConcat = struct { v : String };
namespace StrConcat {
    make : String -> StrConcat;
    make = |v| StrConcat { v : v };
}
impl StrConcat : Monoid {
    unit = make("");
    op = |lhs, rhs| make $ lhs.@v + rhs.@v;
}
impl StrConcat : Eq {
    eq = |lhs, rhs| lhs.@v == rhs.@v;
}

// 最大値モノイド
type I64Max = struct { v : I64 };
namespace I64Max {
    make : I64 -> I64Max;
    make = |v| I64Max { v : v };
}
impl I64Max : Monoid {
    unit = make(I64::minimum);
    op = |lhs, rhs| make $ lhs.@v.max(rhs.@v);
}

// 1要素のセグメント木のテスト
test_one : IO ();
test_one = (
    // [""]
    let tree = Segtree::init(1);
    assert_eq(|_|"", tree.@n, 1);;
    assert_eq(|_|"", tree.@(0), StrConcat::make(""));;
    assert_eq(|_|"", tree.fold(0, 1), StrConcat::make(""));;

    // set @(0) to "a": ["a"]
    let tree = tree.set(0, StrConcat::make("a"));
    assert_eq(|_|"", tree.@(0), StrConcat::make("a"));;
    assert_eq(|_|"", tree.fold(0, 1), StrConcat::make("a"));;

    // build ["a"]
    let tree = Segtree::build([StrConcat::make("a")]);
    assert_eq(|_|"", tree.@n, 1);;
    assert_eq(|_|"", tree.@(0), StrConcat::make("a"));;
    assert_eq(|_|"", tree.fold(0, 1), StrConcat::make("a"));;

    pure()
);

// 2要素のセグメント木のテスト
test_two : IO ();
test_two = (
    // ["", ""]
    let tree = Segtree::init(2);
    assert_eq(|_|"", tree.@n, 2);;
    assert_eq(|_|"", tree.@(0), StrConcat::make(""));;
    assert_eq(|_|"", tree.@(1), StrConcat::make(""));;
    assert_eq(|_|"", tree.fold(0, 1), StrConcat::make(""));;
    assert_eq(|_|"", tree.fold(1, 2), StrConcat::make(""));;
    assert_eq(|_|"", tree.fold(0, 2), StrConcat::make(""));;

    // set @(0) to "a": ["a", ""]
    let tree = tree.set(0, StrConcat::make("a"));
    assert_eq(|_|"", tree.@(0), StrConcat::make("a"));;
    assert_eq(|_|"", tree.@(1), StrConcat::make(""));;
    assert_eq(|_|"", tree.fold(0, 1), StrConcat::make("a"));;
    assert_eq(|_|"", tree.fold(1, 2), StrConcat::make(""));;
    assert_eq(|_|"", tree.fold(0, 2), StrConcat::make("a"));;

    // set @(1) to "b": ["a", "b"]
    let tree = tree.set(1, StrConcat::make("b"));
    assert_eq(|_|"", tree.@(0), StrConcat::make("a"));;
    assert_eq(|_|"", tree.@(1), StrConcat::make("b"));;
    assert_eq(|_|"", tree.fold(0, 1), StrConcat::make("a"));;
    assert_eq(|_|"", tree.fold(1, 2), StrConcat::make("b"));;
    assert_eq(|_|"", tree.fold(0, 2), StrConcat::make("ab"));;

    // build ["a", "b"]
    let tree = Segtree::build(["a", "b"].map(StrConcat::make));
    assert_eq(|_|"", tree.@n, 2);;
    assert_eq(|_|"", tree.@(0), StrConcat::make("a"));;
    assert_eq(|_|"", tree.@(1), StrConcat::make("b"));;
    assert_eq(|_|"", tree.fold(0, 1), StrConcat::make("a"));;
    assert_eq(|_|"", tree.fold(1, 2), StrConcat::make("b"));;
    assert_eq(|_|"", tree.fold(0, 2), StrConcat::make("ab"));;

    pure()
);

// 3要素のセグメント木のテスト
test_three : IO ();
test_three = (
    // ["", "", ""]
    let tree = Segtree::init(3);
    assert_eq(|_|"", tree.@n, 3);;
    assert_eq(|_|"", tree.@(0), StrConcat::make(""));;
    assert_eq(|_|"", tree.@(1), StrConcat::make(""));;
    assert_eq(|_|"", tree.@(2), StrConcat::make(""));;
    assert_eq(|_|"", tree.fold(0, 1), StrConcat::make(""));;
    assert_eq(|_|"", tree.fold(1, 2), StrConcat::make(""));;
    assert_eq(|_|"", tree.fold(2, 3), StrConcat::make(""));;
    assert_eq(|_|"", tree.fold(0, 2), StrConcat::make(""));;
    assert_eq(|_|"", tree.fold(1, 3), StrConcat::make(""));;
    assert_eq(|_|"", tree.fold(0, 3), StrConcat::make(""));;
    
    // update to ["a", "b", "c"]
    let tree = tree.set(1, StrConcat::make("b")).set(2, StrConcat::make("c")).set(0, StrConcat::make("a"));
    assert_eq(|_|"", tree.@(0), StrConcat::make("a"));;
    assert_eq(|_|"", tree.@(1), StrConcat::make("b"));;
    assert_eq(|_|"", tree.@(2), StrConcat::make("c"));;
    assert_eq(|_|"", tree.fold(0, 1), StrConcat::make("a"));;
    assert_eq(|_|"", tree.fold(1, 2), StrConcat::make("b"));;
    assert_eq(|_|"", tree.fold(2, 3), StrConcat::make("c"));;
    assert_eq(|_|"", tree.fold(0, 2), StrConcat::make("ab"));;
    assert_eq(|_|"", tree.fold(1, 3), StrConcat::make("bc"));;
    assert_eq(|_|"", tree.fold(0, 3), StrConcat::make("abc"));;

    // build ["a", "b", "c"]
    let tree = Segtree::build(["a", "b", "c"].map(StrConcat::make));
    assert_eq(|_|"", tree.@n, 3);;
    assert_eq(|_|"", tree.@(0), StrConcat::make("a"));;
    assert_eq(|_|"", tree.@(1), StrConcat::make("b"));;
    assert_eq(|_|"", tree.@(2), StrConcat::make("c"));;
    assert_eq(|_|"", tree.fold(0, 1), StrConcat::make("a"));;
    assert_eq(|_|"", tree.fold(1, 2), StrConcat::make("b"));;
    assert_eq(|_|"", tree.fold(2, 3), StrConcat::make("c"));;
    assert_eq(|_|"", tree.fold(0, 2), StrConcat::make("ab"));;
    assert_eq(|_|"", tree.fold(1, 3), StrConcat::make("bc"));;
    assert_eq(|_|"", tree.fold(0, 3), StrConcat::make("abc"));;

    pure()
);

// ランダムにテストを行う
// 
// # Parameters
// - `is_build` : セグメント木をbuildで構築するかどうか。そうでないときはinitで構築する
// - `rng` : 乱数生成器
test_random : Bool -> Random -> IO Random;
test_random = |is_build, rng| (
    // n要素のセグメント木に対してランダムな操作を行う    
    let n = 100;

    let (tree, arr) = if !is_build {
        let arr = Array::fill(n, Monoid::unit);
        (Segtree::init(n), arr)
    } else {
        let arr = range(0, n).map(|i| StrConcat::make(i.to_U8.to_string)).to_array;
        (Segtree::build(arr), arr)
    };

    let (_1, _2, rng) = *range(0, 1000).fold_m((tree, arr, rng), |_, (tree, arr, rng)|
        // setを実行
        let (rng, i) = rng.generate_I64_nonneg;
        let i = i % n;
        let (rng, v) = rng.generate_I64_nonneg;
        let v = StrConcat::make(v.to_U8.to_string);
        let tree = tree.set(i, v);
        let arr = arr.set(i, v);

        // foldを実行
        let (rng, l) = rng.generate_I64_nonneg;
        let (rng, r) = rng.generate_I64_nonneg;
        let l = l % n;
        let r = l + r % (n - l + 1);
        let v = tree.fold(l, r);
        let w = range(l, r).fold(Monoid::unit, |i, acc| Monoid::op(acc, arr.@(i)));
        assert_eq(|_|"", v, w);;

        pure $ (tree, arr, rng)
    );

    pure $ rng
);

test_speed : IO ();
test_speed = (
    // n=10^5個の要素を持つSegtreeを生成し、n回程度ランダムにクエリを投げる。
    // もしn^2実装になっていたらこのテストは終わらない。
    let n = 1e5;
    let rng = Random::init_by_seed(0_U64);
    let tree = Segtree::init(n) : Segtree I64Max;
    let ((tree, rng, fold_sum), time) = consumed_time_while_lazy(|_| range(0, n).fold((tree, rng, 0), |_, (tree, rng, fold_sum)| (
        // set
        let (rng, i) = rng.generate_I64_nonneg;
        let (rng, v) = rng.generate_I64_nonneg;
        let i = i % n; // 0 <= i < n
        let tree = tree.set(i, I64Max::make(v));

        // fold
        let (rng, k) = rng.generate_I64_nonneg;
        let (rng, l) = rng.generate_I64_nonneg;
        let k = k % n; // 0 <= k < n
        let l = l % n; // 0 <= l < n
        let v = tree.fold(k, l);

        let fold_sum = fold_sum.max(v.@v);

        (tree, rng, fold_sum)
    )));
    assert_eq(|_|"test_speed", fold_sum, 9223241343006558035);;
    println $ "[CPLib.Segtree.Test] Segtree({}): {}".populate([n.to_string, time.to_string]);;

    pure $ ()
);
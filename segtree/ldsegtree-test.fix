module CPLib.LDSegtree.Test;

import CPLib.LDSegtree;
import CPLib.Arithmetic::pmod;
import Random;

test : IO ();
test = (
    let rng = Random::init_by_seed(0_U64);
    let rng = *test_random(false, rng);
    let rng = *test_random(true, rng);

    test_speed;;

    pure()
);

// 文字列の結合に関するモノイド
op : (String, String) -> String;
op = |(lhs, rhs)| lhs + rhs;

unit : String;
unit = "";

// 文字ごとにアフィン変換（mod 26）を行うモノイド
type ShiftAlphabet = struct { a : I64, b : I64 };
namespace ShiftAlphabet {
    make : I64 -> I64 -> ShiftAlphabet;
    make = |a, b| ShiftAlphabet { a : a.pmod(26), b : b.pmod(26) };

    a_unit : ShiftAlphabet;
    a_unit = make(1, 0);

    a_op : (ShiftAlphabet, ShiftAlphabet) -> ShiftAlphabet;
    a_op = |(lhs, rhs)| (
        let a = lhs.@a;
        let b = lhs.@b;
        let c = rhs.@a;
        let d = rhs.@b;
        // lhs(x) = ax + b, rhs(x) = cx + d,
        // x・lhs・rhs = rhs(lhs(x)) = c(ax + b) + d = cax + cb + d
        let e = (c * a).pmod(26);
        let f = (c * b + d).pmod(26);
        make(e, f)
    );

    act : (String, ShiftAlphabet) -> String;
    act = |(s, a)| (
        let bytes = s.get_bytes;
        let bytes = bytes.map(|x| 
            if x == '\0' { x }; // ヌル文字は変換しない
            let x = (x - 'a').to_I64;
            let x = (a.@a * x + a.@b).pmod(26);
            let x = x.to_U8 + 'a';
            x
        );
        String::_unsafe_from_c_str(bytes)
    );
}
impl ShiftAlphabet : ToString {
    to_string = |a| "({}, {})".populate([a.@a.to_string, a.@b.to_string]);
}

// ランダムな数文字のアルファベット文字列を生成する
gen_random_alphabetical_string : Random -> (Random, String);
gen_random_alphabetical_string = |rng| (
    let (rng, len) = rng.generate_I64_nonneg;
    let len = len % 6; // 0～5文字
    let (bytes, rng) = range(0, len).fold(([], rng), |_, (bytes, rng)|
        let (rng, c) = rng.generate_I64_nonneg;
        let c = (c % 26).to_U8 + 'a';
        let bytes = bytes.push_back(c);
        (bytes, rng)
    );
    let bytes = bytes.push_back('\0');
    let s = String::_unsafe_from_c_str(bytes);
    (rng, s)
);

test_random : Bool -> Random -> IO Random;
test_random = |is_build, rng| (
    // n要素のセグメント木に対してランダムな操作を行う
    let n = 100;

    let (tree, arr) = if !is_build {
        let arr = Array::fill(n, "");
        (LDSegtree::init(n, "", op, a_unit, a_op, act), arr)
    } else {
        let arr = range(0, n).map(|i| 
            let v = String::from_U8('a' + (i % 26).to_U8);
            v
        ).to_array;
        (LDSegtree::build(arr, "", op, a_unit, a_op, act), arr)
    };

    let (_1, _2, rng) = *range(0, 1000).fold_m((tree, arr, rng), |_, (tree, arr, rng)|
        let (rng, dice) = rng.generate_I64_nonneg;
        let dice = dice % 2;
        let (tree, arr, rng) = *if dice == 0 {
            // setによる更新
            let (rng, i) = rng.generate_I64_nonneg;
            let i = i % n;
            let (rng, v) = rng.gen_random_alphabetical_string;
            let tree = tree.set(i, v);
            let arr = arr.set(i, v);
            pure $ (tree, arr, rng)
        } else {
            // 範囲作用による更新
            let (rng, l) = rng.generate_I64_nonneg;
            let (rng, r) = rng.generate_I64_nonneg;
            let l = l % n;
            let r = l + r % (n - l + 1);
            let (rng, a) = rng.generate_I64_nonneg;
            let (rng, b) = rng.generate_I64_nonneg;
            let a = ShiftAlphabet::make(a, b);
            let tree = tree.act_range(l, r, a);
            let arr = range(l, r).fold(arr, |i, arr| arr.set(i, act $ (arr.@(i), a)));
            pure $ (tree, arr, rng)
        };

        // foldを実行
        let (rng, l) = rng.generate_I64_nonneg;
        let (rng, r) = rng.generate_I64_nonneg;
        let l = l % n;
        let r = l + r % (n - l + 1);
        let (tree, v) = tree.fold(l, r);
        let w = range(l, r).fold(unit, |i, acc| op $ (acc, arr.@(i)));
        assert_eq(|_|"lsegtree random", v, w);;

        pure $ (tree, arr, rng)
    );

    pure $ rng
);

test_speed : IO ();
test_speed = (
    // n=10^5個の要素を持つSegtreeを生成し、n回程度ランダムにクエリを投げる。
    // もしn^2実装になっていたらこのテストは終わらない。
    let n = 1e5;
    let rng = Random::init_by_seed(0_U64);
    let tree = LDSegtree::init(n, I64::minimum, |(lhs, rhs)| max(lhs, rhs), 0, |(lhs, rhs)| lhs + rhs, |(lhs, rhs)| lhs + rhs) : LDSegtree I64 I64;
    let ((tree, rng, fold_sum), time) = consumed_time_while_lazy(|_| range(0, n).fold((tree, rng, 0), |_, (tree, rng, fold_sum)| (
        // set
        let (rng, i) = rng.generate_I64_nonneg;
        let (rng, v) = rng.generate_I64_nonneg;
        let i = i % n; // 0 <= i < n
        let tree = tree.set(i, v);

        // act_range
        let (rng, l) = rng.generate_I64_nonneg;
        let (rng, r) = rng.generate_I64_nonneg;
        let l = l % n; // 0 <= l < n
        let r = l + r % (n - l + 1);
        let (rng, a) = rng.generate_I64_nonneg;
        let tree = tree.act_range(l, r, a);

        // fold
        let (rng, k) = rng.generate_I64_nonneg;
        let (rng, l) = rng.generate_I64_nonneg;
        let k = k % n; // 0 <= k < n
        let l = l % n; // 0 <= l < n
        let (tree, v) = tree.fold(k, l);

        let fold_sum = fold_sum.max(v);

        (tree, rng, fold_sum)
    )));
    assert_eq(|_|"test_speed", fold_sum, 9223363321965027598);;
    println $ "[CPLib.LDSegtree.Test] LDSegtree({}): {}".populate([n.to_string, time.to_string]);;

    pure $ ()
);
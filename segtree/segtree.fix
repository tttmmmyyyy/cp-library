// セグメント木の実装
//
// 使用方法：
// 要素は`CPLib.Trait.Monoid`を実装している必要があります。
// 先ずはwrapper型を作成し、`Monoid`を実装してください：
// ```
// // 文字列の結合に関するモノイド
// type StrConcat = struct { v : String };
// namespace StrConcat {
//     make : String -> StrConcat;
//     make = |v| StrConcat { v : v };
// }
// impl StrConcat : Monoid {
//     unit = make("");
//     op = |lhs, rhs| make $ lhs.@v + rhs.@v;
// }
// ```
// あとは、`make_unit`や`make`を使ってセグメント木を作成し、
// `@`で要素を取得、`set`で要素を更新、`fold`で区間の畳み込みを計算できます。
// ```
// let tree = Segtree::build(["a", "x", "c"].map(StrConcat::make));
// let tree = tree.set(1, make("b"));
// assert_eq(|_|"", tree.@(1), make("b"));;
// assert_eq(|_|"", tree.fold(0, 3), make("abc"));;
// ```
// 
// モノイド構造が動的に決まる場合は、モジュール`CPLib.DSegtree`を使用してください。
module CPLib.Segtree;

// この実装にあたっては、[maspyさんの記事](https://maspypy.com/segment-tree-%E3%81%AE%E3%81%8A%E5%8B%89%E5%BC%B71) を参考にしました。良質な解説をありがとうございます。

import CPLib.Trait::{Monoid, Monoid::*};

// セグメント木
type Segtree m = struct {
    // 要素数
    n : I64,
    // 内部配列
    // 
    // 1-indexedで運用する：長さは`2n`、第0インデックスは使用しない。
    elems : Array m,
};

// すべての要素が単位元であるようなセグメント木を作成する
//
// # Parameters
// - `n` : セグメント木の要素数
init : [m : Monoid] I64 -> Segtree m;
init = |n| (
    let elems = Array::fill(n * 2, Monoid::unit);
    Segtree { elems : elems, n : n }
);

// 要素の配列からセグメント木を作成する
// 
// # Parameters
// - `elems` : セグメント木の要素を格納する配列
build : [m : Monoid] Array m -> Segtree m;
build = |elems| (
    let n = elems.get_size;
    let tree = Array::fill(n * 2, Monoid::unit);
    // [n, 2n)に要素をセット
    let tree = range(0, n).fold(tree, |i, tree| tree.set(n + i, elems.@(i)) );
    // [1, n)の範囲を計算
    let tree = range_step(n-1, 0, -1).fold(tree, |i, tree|
        let left = tree.@(i * 2);
        let right = tree.@(i * 2 + 1);
        tree.set(i, Monoid::op(left, right))
    );
    Segtree { elems : tree, n : n }
);

// セグメント木の要素を取得する
// 
// # Parameters
// - `i` : インデックス（0-indexed）
// - `tree` : セグメント木
@ : I64 -> Segtree m -> m;
@ = |i, tree| (
    let n = tree.@n;
    tree.@elems.@(n + i)
);

// 要素を設定する
// 
// # Parameters
// - `i` : インデックス（0-indexed）
// - `value` : 設定する値
// - `tree` : セグメント木
set : [m : Monoid] I64 -> m -> Segtree m -> Segtree m;
set = |i, value, tree| (
    let n = tree.@n;
    let i = i + n;
    let tree = tree.mod_elems(set(i, value));
    // `i`の親ノードをすべて更新
    loop((i, tree), |(i, tree)|
        if i == 0 { break $ tree }; // ルートノードに到達したら終了
        let i = i / 2; // 親ノードに移動
        let left = tree.@elems.@(i * 2);
        let right = tree.@elems.@(i * 2 + 1);
        let value = Monoid::op(left, right);
        let tree = tree.mod_elems(set(i, value));
        continue $ (i, tree)
    )
);

// 半開区間[l, r)にある要素の畳み込みを計算する
//
// # Parameters
// - `l` : 区間の左端 (0-indexed)
// - `r` : 区間の右端 (0-indexed, exclusive)
// - `tree` : セグメント木
fold : [m : Monoid] I64 -> I64 -> Segtree m -> m;
fold = |l, r, tree| (
    let n = tree.@n;
    let l = l + n;
    let r = r + n;
    let (acc_l, acc_r) = loop((l, r, Monoid::unit, Monoid::unit), |(l, r, acc_l, acc_r)|
        if l >= r {
            break $ (acc_l, acc_r)
        };
        let (l, acc_l) = if l % 2 == 0 { (l, acc_l) } else {
            let acc_l = Monoid::op(acc_l, tree.@elems.@(l));
            let l = l + 1;
            (l, acc_l)
        };
        let (r, acc_r) = if r % 2 == 0 { (r, acc_r) } else {
            let r = r - 1;
            let acc_r = Monoid::op(tree.@elems.@(r), acc_r);
            (r, acc_r)
        };
        let l = l / 2;
        let r = r / 2;
        continue $ (l, r, acc_l, acc_r)
    );
    Monoid::op(acc_l, acc_r)
);
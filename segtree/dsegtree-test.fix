module CPLib.DSegtree.Test;

import CPLib.DSegtree;
import Random;

test : IO ();
test = (
    test_one;;
    test_two;;
    test_three;;

    let rng = Random::init_by_seed(0_U64);
    let rng = *test_random(false, rng);
    let rng = *test_random(true, rng);

    pure()
);

// 1要素のセグメント木のテスト
test_one : IO ();
test_one = (
    // [""]
    let tree = DSegtree::init(1, "", |(lhs, rhs)| lhs + rhs);
    assert_eq(|_|"", tree.@n, 1);;
    assert_eq(|_|"", tree.@(0), "");;
    assert_eq(|_|"", tree.fold(0, 1), "");;

    // set @(0) to "a": ["a"]
    let tree = tree.set(0, "a");
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;

    // build ["a"]
    let tree = DSegtree::build(["a"], "", |(lhs, rhs)| lhs + rhs);
    assert_eq(|_|"", tree.@n, 1);;
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;

    pure()
);

// 2要素のセグメント木のテスト
test_two : IO ();
test_two = (
    // ["", ""]
    let tree = DSegtree::init(2, "", |(lhs, rhs)| lhs + rhs);
    assert_eq(|_|"", tree.@n, 2);;
    assert_eq(|_|"", tree.@(0), "");;
    assert_eq(|_|"", tree.@(1), "");;
    assert_eq(|_|"", tree.fold(0, 1), "");;
    assert_eq(|_|"", tree.fold(1, 2), "");;
    assert_eq(|_|"", tree.fold(0, 2), "");;

    // set @(0) to "a": ["a", ""]
    let tree = tree.set(0, "a");
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.@(1), "");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;
    assert_eq(|_|"", tree.fold(1, 2), "");;
    assert_eq(|_|"", tree.fold(0, 2), "a");;

    // set @(1) to "b": ["a", "b"]
    let tree = tree.set(1, "b");
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.@(1), "b");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;
    assert_eq(|_|"", tree.fold(1, 2), "b");;
    assert_eq(|_|"", tree.fold(0, 2), "ab");;

    // build ["a", "b"]
    let tree = DSegtree::build(["a", "b"], "", |(lhs, rhs)| lhs + rhs);
    assert_eq(|_|"", tree.@n, 2);;
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.@(1), "b");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;
    assert_eq(|_|"", tree.fold(1, 2), "b");;
    assert_eq(|_|"", tree.fold(0, 2), "ab");;

    pure()
);

// 3要素のセグメント木のテスト
test_three : IO ();
test_three = (
    // ["", "", ""]
    let tree = DSegtree::init(3, "", |(lhs, rhs)| lhs + rhs);
    assert_eq(|_|"", tree.@n, 3);;
    assert_eq(|_|"", tree.@(0), "");;
    assert_eq(|_|"", tree.@(1), "");;
    assert_eq(|_|"", tree.@(2), "");;
    assert_eq(|_|"", tree.fold(0, 1), "");;
    assert_eq(|_|"", tree.fold(1, 2), "");;
    assert_eq(|_|"", tree.fold(2, 3), "");;
    assert_eq(|_|"", tree.fold(0, 2), "");;
    assert_eq(|_|"", tree.fold(1, 3), "");;
    assert_eq(|_|"", tree.fold(0, 3), "");;
    
    // update to ["a", "b", "c"]
    let tree = tree.set(1, "b").set(2, "c").set(0, "a");
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.@(1), "b");;
    assert_eq(|_|"", tree.@(2), "c");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;
    assert_eq(|_|"", tree.fold(1, 2), "b");;
    assert_eq(|_|"", tree.fold(2, 3), "c");;
    assert_eq(|_|"", tree.fold(0, 2), "ab");;
    assert_eq(|_|"", tree.fold(1, 3), "bc");;
    assert_eq(|_|"", tree.fold(0, 3), "abc");;

    // build ["a", "b", "c"]
    let tree = DSegtree::build(["a", "b", "c"], "", |(lhs, rhs)| lhs + rhs);
    assert_eq(|_|"", tree.@n, 3);;
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.@(1), "b");;
    assert_eq(|_|"", tree.@(2), "c");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;
    assert_eq(|_|"", tree.fold(1, 2), "b");;
    assert_eq(|_|"", tree.fold(2, 3), "c");;
    assert_eq(|_|"", tree.fold(0, 2), "ab");;
    assert_eq(|_|"", tree.fold(1, 3), "bc");;
    assert_eq(|_|"", tree.fold(0, 3), "abc");;

    pure()
);

// ランダムにテストを行う
// 
// # Parameters
// - `is_build` : セグメント木をbuildで構築するかどうか。そうでないときはinitで構築する
// - `rng` : 乱数生成器
test_random : Bool -> Random -> IO Random;
test_random = |is_build, rng| (
    // n要素のセグメント木に対してランダムな操作を行う    
    let n = 100;

    let (tree, arr) = if !is_build {
        let arr = Array::fill(n, "");
        (DSegtree::init(n, "", |(lhs, rhs)| lhs + rhs), arr)
    } else {
        let arr = range(0, n).map(to_string).to_array;
        (DSegtree::build(arr, "", |(lhs, rhs)| lhs + rhs), arr)
    };

    let (_1, _2, rng) = *range(0, 1000).fold_m((tree, arr, rng), |_, (tree, arr, rng)|
        // setを実行
        let (rng, i) = rng.generate_I64_nonneg;
        let i = i % n;
        let (rng, v) = rng.generate_I64_nonneg;
        let v = v.to_U8.to_string;
        let tree = tree.set(i, v);
        let arr = arr.set(i, v);

        // foldを実行
        let (rng, l) = rng.generate_I64_nonneg;
        let (rng, r) = rng.generate_I64_nonneg;
        let l = l % n;
        let r = l + r % (n - l + 1);
        let v = tree.fold(l, r);
        let w = range(l, r).fold("", |i, acc| acc + arr.@(i));
        assert_eq(|_|"", v, w);;

        pure $ (tree, arr, rng)
    );

    pure $ rng
);

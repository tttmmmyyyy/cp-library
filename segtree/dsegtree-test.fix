module CPLib.DSegtree.Test;

import CPLib.DSegtree;

test : IO ();
test = (
    test_one;;
    test_two;;
    test_three;;

    pure()
);

// 1要素のセグメント木のテスト
test_one : IO ();
test_one = (
    // [""]
    let tree = DSegtree::init(1, "", |(lhs, rhs)| lhs + rhs);
    assert_eq(|_|"", tree.@n, 1);;
    assert_eq(|_|"", tree.@(0), "");;
    assert_eq(|_|"", tree.fold(0, 1), "");;

    // set @(0) to "a": ["a"]
    let tree = tree.set(0, "a");
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;

    // build ["a"]
    let tree = DSegtree::build(["a"], "", |(lhs, rhs)| lhs + rhs);
    assert_eq(|_|"", tree.@n, 1);;
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;

    pure()
);

// 2要素のセグメント木のテスト
test_two : IO ();
test_two = (
    // ["", ""]
    let tree = DSegtree::init(2, "", |(lhs, rhs)| lhs + rhs);
    assert_eq(|_|"", tree.@n, 2);;
    assert_eq(|_|"", tree.@(0), "");;
    assert_eq(|_|"", tree.@(1), "");;
    assert_eq(|_|"", tree.fold(0, 1), "");;
    assert_eq(|_|"", tree.fold(1, 2), "");;
    assert_eq(|_|"", tree.fold(0, 2), "");;

    // set @(0) to "a": ["a", ""]
    let tree = tree.set(0, "a");
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.@(1), "");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;
    assert_eq(|_|"", tree.fold(1, 2), "");;
    assert_eq(|_|"", tree.fold(0, 2), "a");;

    // set @(1) to "b": ["a", "b"]
    let tree = tree.set(1, "b");
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.@(1), "b");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;
    assert_eq(|_|"", tree.fold(1, 2), "b");;
    assert_eq(|_|"", tree.fold(0, 2), "ab");;

    // build ["a", "b"]
    let tree = DSegtree::build(["a", "b"], "", |(lhs, rhs)| lhs + rhs);
    assert_eq(|_|"", tree.@n, 2);;
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.@(1), "b");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;
    assert_eq(|_|"", tree.fold(1, 2), "b");;
    assert_eq(|_|"", tree.fold(0, 2), "ab");;

    pure()
);

// 3要素のセグメント木のテスト
test_three : IO ();
test_three = (
    // ["", "", ""]
    let tree = DSegtree::init(3, "", |(lhs, rhs)| lhs + rhs);
    assert_eq(|_|"", tree.@n, 3);;
    assert_eq(|_|"", tree.@(0), "");;
    assert_eq(|_|"", tree.@(1), "");;
    assert_eq(|_|"", tree.@(2), "");;
    assert_eq(|_|"", tree.fold(0, 1), "");;
    assert_eq(|_|"", tree.fold(1, 2), "");;
    assert_eq(|_|"", tree.fold(2, 3), "");;
    assert_eq(|_|"", tree.fold(0, 2), "");;
    assert_eq(|_|"", tree.fold(1, 3), "");;
    assert_eq(|_|"", tree.fold(0, 3), "");;
    
    // update to ["a", "b", "c"]
    let tree = tree.set(1, "b").set(2, "c").set(0, "a");
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.@(1), "b");;
    assert_eq(|_|"", tree.@(2), "c");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;
    assert_eq(|_|"", tree.fold(1, 2), "b");;
    assert_eq(|_|"", tree.fold(2, 3), "c");;
    assert_eq(|_|"", tree.fold(0, 2), "ab");;
    assert_eq(|_|"", tree.fold(1, 3), "bc");;
    assert_eq(|_|"", tree.fold(0, 3), "abc");;

    // build ["a", "b", "c"]
    let tree = DSegtree::build(["a", "b", "c"], "", |(lhs, rhs)| lhs + rhs);
    assert_eq(|_|"", tree.@n, 3);;
    assert_eq(|_|"", tree.@(0), "a");;
    assert_eq(|_|"", tree.@(1), "b");;
    assert_eq(|_|"", tree.@(2), "c");;
    assert_eq(|_|"", tree.fold(0, 1), "a");;
    assert_eq(|_|"", tree.fold(1, 2), "b");;
    assert_eq(|_|"", tree.fold(2, 3), "c");;
    assert_eq(|_|"", tree.fold(0, 2), "ab");;
    assert_eq(|_|"", tree.fold(1, 3), "bc");;
    assert_eq(|_|"", tree.fold(0, 3), "abc");;

    pure()
);